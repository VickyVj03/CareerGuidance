{"ast":null,"code":"class GroupPlaybackControls {\n  constructor(animations) {\n    this.animations = animations.filter(Boolean);\n  }\n  then(onResolve, onReject) {\n    return Promise.all(this.animations).then(onResolve).catch(onReject);\n  }\n  /**\n   * TODO: Filter out cancelled or stopped animations before returning\n   */\n  get time() {\n    return this.animations[0].time;\n  }\n  /**\n   * time assignment could reasonably run every frame, so\n   * we iterate using a normal loop to avoid function creation.\n   */\n  set time(time) {\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i].time = time;\n    }\n  }\n  runAll(methodName) {\n    this.animations.forEach(controls => controls[methodName]());\n  }\n  play() {\n    this.runAll(\"play\");\n  }\n  pause() {\n    this.runAll(\"pause\");\n  }\n  stop() {\n    this.runAll(\"stop\");\n  }\n}\nexport { GroupPlaybackControls };","map":{"version":3,"names":["GroupPlaybackControls","constructor","animations","filter","Boolean","then","onResolve","onReject","Promise","all","catch","time","i","length","runAll","methodName","forEach","controls","play","pause","stop"],"sources":["C:/Users/ADMIN/Documents/CGT Website/CGT-main/CGT-main/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs"],"sourcesContent":["class GroupPlaybackControls {\n    constructor(animations) {\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    get time() {\n        return this.animations[0].time;\n    }\n    /**\n     * time assignment could reasonably run every frame, so\n     * we iterate using a normal loop to avoid function creation.\n     */\n    set time(time) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i].time = time;\n        }\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    stop() {\n        this.runAll(\"stop\");\n    }\n}\n\nexport { GroupPlaybackControls };\n"],"mappings":"AAAA,MAAMA,qBAAqB,CAAC;EACxBC,WAAW,CAACC,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU,CAACC,MAAM,CAACC,OAAO,CAAC;EAChD;EACAC,IAAI,CAACC,SAAS,EAAEC,QAAQ,EAAE;IACtB,OAAOC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,UAAU,CAAC,CAACG,IAAI,CAACC,SAAS,CAAC,CAACI,KAAK,CAACH,QAAQ,CAAC;EACvE;EACA;AACJ;AACA;EACI,IAAII,IAAI,GAAG;IACP,OAAO,IAAI,CAACT,UAAU,CAAC,CAAC,CAAC,CAACS,IAAI;EAClC;EACA;AACJ;AACA;AACA;EACI,IAAIA,IAAI,CAACA,IAAI,EAAE;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,UAAU,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACV,UAAU,CAACU,CAAC,CAAC,CAACD,IAAI,GAAGA,IAAI;IAClC;EACJ;EACAG,MAAM,CAACC,UAAU,EAAE;IACf,IAAI,CAACb,UAAU,CAACc,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,UAAU,CAAC,EAAE,CAAC;EACjE;EACAG,IAAI,GAAG;IACH,IAAI,CAACJ,MAAM,CAAC,MAAM,CAAC;EACvB;EACAK,KAAK,GAAG;IACJ,IAAI,CAACL,MAAM,CAAC,OAAO,CAAC;EACxB;EACAM,IAAI,GAAG;IACH,IAAI,CAACN,MAAM,CAAC,MAAM,CAAC;EACvB;AACJ;AAEA,SAASd,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}